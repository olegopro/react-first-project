{"version":3,"sources":["components/Dialogs/Dialogs.module.css","hoc/WithAuthRedirect.js","components/Dialogs/AddMessageForm/AddMessageForm.jsx","components/Dialogs/DialogItem/DialogsItem.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["module","exports","mapStateToPropsForRedirect","state","isAuth","auth","maxLength50","maxLengthCreator","reduxForm","form","props","onSubmit","handleSubmit","Field","component","Textarea","validate","required","placeholder","name","DialogItem","path","id","className","classes","dialog","to","Message","console","log","message","Dialogs","dialogsPage","dialogsElements","dialogs","map","messagesElements","messages","dialogsItems","values","sendMessage","newMessageBody","compose","connect","dispatch","sendMessageCreator","Component","RedirectComponent","this","React"],"mappings":"qHACAA,EAAOC,QAAU,CAAC,QAAU,yBAAyB,aAAe,8BAA8B,OAAS,wBAAwB,OAAS,wBAAwB,SAAW,0BAA0B,QAAU,2B,iICG/MC,EAA6B,SAAAC,GAAK,MAAK,CAC1CC,OAAQD,EAAME,KAAKD,S,0CCDdE,EAAcC,YAAiB,IAoBtBC,cAAU,CAAEC,KAAM,2BAAlBD,EAlBQ,SAAAE,GACtB,OACC,uBAAMC,SAAUD,EAAME,aAAtB,UACC,8BACC,cAACC,EAAA,EAAD,CACCC,UAAWC,IACXC,SAAU,CAACC,IAAUX,GACrBY,YAAY,oGACZC,KAAK,qBAGP,8BACC,kD,0BCLWC,EAVI,SAAAV,GACf,IAAIW,EAAO,YAAcX,EAAMY,GAE/B,OACI,qBAAKC,UAAWC,IAAQC,OAAxB,SACI,cAAC,IAAD,CAASC,GAAIL,EAAb,SAAoBX,EAAMS,UCDvBQ,EALC,SAAAjB,GAEZ,OADAkB,QAAQC,IAAInB,GACL,qBAAKa,UAAWC,IAAQC,OAAxB,SAAiCf,EAAMoB,WCiCnCC,EA9BC,SAAArB,GACf,IAAIP,EAAQO,EAAMsB,YAEdC,EAAkB9B,EAAM+B,QAAQC,KAAI,SAAAV,GACvC,OAAO,cAAC,EAAD,CAAYN,KAAMM,EAAON,KAAMG,GAAIG,EAAOH,IAASG,EAAOH,OAG9Dc,EAAmBjC,EAAMkC,SAASF,KAAI,SAAAL,GACzC,OAAO,cAAC,EAAD,CAASA,QAASA,EAAQA,QAASR,GAAIQ,EAAQR,IAASQ,EAAQR,OASxE,OAAKZ,EAAMN,OAGV,sBAAKmB,UAAWC,IAAQU,QAAxB,UACC,qBAAKX,UAAWC,IAAQc,aAAxB,SAAuCL,IACvC,qBAAKV,UAAWC,IAAQa,SAAxB,SACC,8BAAMD,MAEP,cAAC,EAAD,CAAgBzB,SAZG,SAAA4B,GACpB7B,EAAM8B,YAAYD,EAAOE,sBAGA,cAAC,IAAD,CAAUf,GAAI,YCJ1BgB,sBAAQC,aAdD,SAAAxC,GACrB,MAAO,CACN6B,YAAa7B,EAAM6B,gBAII,SAAAY,GACxB,MAAO,CACNJ,YAAa,SAAAC,GACZG,EAASC,YAAmBJ,ULPC,SAAAK,GAAc,IACvCC,EADsC,4JAE3C,WACC,OAAKC,KAAKtC,MAAMN,OAET,cAAC0C,EAAD,eAAeE,KAAKtC,QAFI,cAAC,IAAD,CAAUgB,GAAG,eAHF,GACZuB,IAAMH,WAUtC,OAFqCH,YAAQzC,EAARyC,CAAoCI,KKG3DL,CAAwEX","file":"static/js/4.fbbf4ee8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2xRSA\",\"dialogsItems\":\"Dialogs_dialogsItems__2sNe2\",\"active\":\"Dialogs_active__2sQhs\",\"dialog\":\"Dialogs_dialog__lk_cw\",\"messages\":\"Dialogs_messages__1w_Up\",\"message\":\"Dialogs_message__1xIDh\"};","import React from 'react'\nimport { connect } from 'react-redux'\nimport { Redirect } from 'react-router'\n\nlet mapStateToPropsForRedirect = state => ({\n\tisAuth: state.auth.isAuth\n})\n\nexport const withAuthRedirect = Component => {\n\tclass RedirectComponent extends React.Component {\n\t\trender() {\n\t\t\tif (!this.props.isAuth) return <Redirect to=\"/login\" />\n\n\t\t\treturn <Component {...this.props} />\n\t\t}\n\t}\n\n\tlet ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\n\n\treturn ConnectedAuthRedirectComponent\n}\n","import { Field, reduxForm } from 'redux-form'\nimport { maxLengthCreator, required } from '../../../utils/validators/validators'\nimport { Textarea } from '../../common/FormsControls/FormsControls'\n\nconst maxLength50 = maxLengthCreator(50)\n\nconst AddMessageForm = props => {\n\treturn (\n\t\t<form onSubmit={props.handleSubmit}>\n\t\t\t<div>\n\t\t\t\t<Field\n\t\t\t\t\tcomponent={Textarea}\n\t\t\t\t\tvalidate={[required, maxLength50]}\n\t\t\t\t\tplaceholder=\"Введите сообщение\"\n\t\t\t\t\tname=\"newMessageBody\"\n\t\t\t\t/>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<button>Send</button>\n\t\t\t</div>\n\t\t</form>\n\t)\n}\n\nexport default reduxForm({ form: 'dialog-add-message-form' })(AddMessageForm)\n","import classes from './../Dialogs.module.css'\nimport { NavLink } from 'react-router-dom'\n\nconst DialogItem = props => {\n    let path = '/dialogs/' + props.id\n    // console.log(props.name)\n    return (\n        <div className={classes.dialog}>\n            <NavLink to={path}>{props.name}</NavLink>\n        </div>\n    )\n}\n\nexport default DialogItem\n","import classes from './../Dialogs.module.css'\n\nconst Message = props => {\n    console.log(props)\n    return <div className={classes.dialog}>{props.message}</div>\n}\n\nexport default Message\n","import React from 'react'\nimport { Redirect } from 'react-router'\nimport AddMessageForm from './AddMessageForm/AddMessageForm'\nimport DialogItem from './DialogItem/DialogsItem'\nimport classes from './Dialogs.module.css'\nimport Message from './Message/Message'\n\nconst Dialogs = props => {\n\tlet state = props.dialogsPage\n\n\tlet dialogsElements = state.dialogs.map(dialog => {\n\t\treturn <DialogItem name={dialog.name} id={dialog.id} key={dialog.id} />\n\t})\n\n\tlet messagesElements = state.messages.map(message => {\n\t\treturn <Message message={message.message} id={message.id} key={message.id} />\n\t})\n\n\t// let newMessageBody = state.newMessageBody\n\n\tlet addNewsMessage = values => {\n\t\tprops.sendMessage(values.newMessageBody)\n\t}\n\n\tif (!props.isAuth) return <Redirect to={'/login'} />\n\n\treturn (\n\t\t<div className={classes.dialogs}>\n\t\t\t<div className={classes.dialogsItems}>{dialogsElements}</div>\n\t\t\t<div className={classes.messages}>\n\t\t\t\t<div>{messagesElements}</div>\n\t\t\t</div>\n\t\t\t<AddMessageForm onSubmit={addNewsMessage} />\n\t\t</div>\n\t)\n}\n\nexport default Dialogs\n","import { connect } from 'react-redux'\nimport { compose } from 'redux'\nimport { withAuthRedirect } from '../../hoc/WithAuthRedirect'\nimport { sendMessageCreator } from '../../Redux/dialogs-reducer'\nimport Dialogs from './Dialogs'\n\nlet mapStateToProps = state => {\n\treturn {\n\t\tdialogsPage: state.dialogsPage\n\t}\n}\n\nlet mapDispatchToProps = dispatch => {\n\treturn {\n\t\tsendMessage: newMessageBody => {\n\t\t\tdispatch(sendMessageCreator(newMessageBody))\n\t\t}\n\t}\n}\n\nexport default compose(connect(mapStateToProps, mapDispatchToProps), withAuthRedirect)(Dialogs)\n"],"sourceRoot":""}